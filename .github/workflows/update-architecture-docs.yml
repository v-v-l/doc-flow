name: Update Architecture Documentation

on:
  push:
    branches: [main]
    paths:
      - '**/*.js'
      - '**/*.ts'
      - '**/*.py'
      - '**/*.java'
      - '**/*.go'
      - '**/*.rs'
      - '**/*.php'
      - '**/*.rb'
      - '**/*.cs'
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update all architecture documentation'
        required: false
        default: false
        type: boolean

jobs:
  update-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "Doc Flow Bot"
          
      - name: Check for Architecture Changes
        id: check
        run: |
          # Check for pending updates
          if [ -f ".tools/doc-flow/pending-updates.md" ] && [ -s ".tools/doc-flow/pending-updates.md" ]; then
            echo "📝 Pending architecture updates found"
            echo "has_updates=true" >> $GITHUB_OUTPUT
            
            # Count pending updates
            UPDATES=$(grep -c "## Auto-Captured:" ".tools/doc-flow/pending-updates.md" 2>/dev/null || echo "0")
            echo "update_count=$UPDATES" >> $GITHUB_OUTPUT
          else
            echo "No pending updates found"
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "update_count=0" >> $GITHUB_OUTPUT
          fi
          
          # Check if force update is requested
          if [ "${{ github.event.inputs.force_update }}" = "true" ]; then
            echo "Force update requested"
            echo "has_updates=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Analyze Pending Updates
        if: steps.check.outputs.has_updates == 'true'
        id: analyze
        run: |
          # Extract information from pending updates
          if [ -f ".tools/doc-flow/pending-updates.md" ]; then
            # Get recent commits that triggered updates
            RECENT_COMMITS=$(grep -A 10 "## Auto-Captured:" ".tools/doc-flow/pending-updates.md" | grep "Commit:" | head -3 | sed 's/.*Commit: //')
            
            # Extract component information
            COMPONENTS=$(grep -E "(Service|Controller|Component|Module|Handler)" ".tools/doc-flow/pending-updates.md" | head -5)
            
            echo "recent_commits<<EOF" >> $GITHUB_OUTPUT
            echo "$RECENT_COMMITS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            echo "components<<EOF" >> $GITHUB_OUTPUT
            echo "$COMPONENTS" >> $GITHUB_OUTPUT  
            echo "EOF" >> $GITHUB_OUTPUT
          fi
          
      - name: Process Architecture Updates
        if: steps.check.outputs.has_updates == 'true'
        run: |
          echo "🏗️ Processing ${{ steps.check.outputs.update_count }} architecture updates..."
          
          # Create architecture documentation directory if it doesn't exist
          mkdir -p docs/architecture/{components,modules,integrations,overview}
          
          # Process pending updates into structured documentation
          if [ -f ".tools/doc-flow/pending-updates.md" ]; then
            # Create a summary of processed updates
            echo "# Recent Architecture Updates" > docs/architecture/recent-updates.md
            echo "" >> docs/architecture/recent-updates.md
            echo "**Last Updated**: $(date '+%Y-%m-%d %H:%M:%S UTC')" >> docs/architecture/recent-updates.md
            echo "**Updates Processed**: ${{ steps.check.outputs.update_count }}" >> docs/architecture/recent-updates.md
            echo "" >> docs/architecture/recent-updates.md
            echo "## Recent Changes" >> docs/architecture/recent-updates.md
            echo "${{ steps.analyze.outputs.components }}" >> docs/architecture/recent-updates.md
            echo "" >> docs/architecture/recent-updates.md
            echo "## Commits Processed" >> docs/architecture/recent-updates.md
            echo "${{ steps.analyze.outputs.recent_commits }}" >> docs/architecture/recent-updates.md
            echo "" >> docs/architecture/recent-updates.md
            echo "---" >> docs/architecture/recent-updates.md
            echo "*This file is automatically updated by Doc Flow when architecture changes are merged.*" >> docs/architecture/recent-updates.md
          fi
          
          # Mark updates as processed by adding timestamp
          if [ -f ".tools/doc-flow/pending-updates.md" ]; then
            echo "" >> ".tools/doc-flow/pending-updates.md"
            echo "<!-- ✅ PROCESSED on $(date '+%Y-%m-%d %H:%M:%S') by GitHub Actions -->" >> ".tools/doc-flow/pending-updates.md"
          fi
          
      - name: Update README Architecture Section
        if: steps.check.outputs.has_updates == 'true'
        run: |
          # Update README with architecture overview if section exists
          if grep -q "## 🏗️ Architecture" README.md 2>/dev/null; then
            echo "📝 Updating README architecture section"
            
            # Count documented components
            COMPONENT_COUNT=0
            if [ -d "docs/architecture/components" ]; then
              COMPONENT_COUNT=$(find docs/architecture/components -name "*.md" | wc -l)
            fi
            
            # Create a simple architecture summary
            echo "" > /tmp/arch-summary.md
            echo "*Architecture automatically documented with Doc Flow*" >> /tmp/arch-summary.md
            echo "" >> /tmp/arch-summary.md
            echo "**Components Documented**: $COMPONENT_COUNT" >> /tmp/arch-summary.md
            echo "**Last Updated**: $(date '+%Y-%m-%d')" >> /tmp/arch-summary.md
            echo "**Recent Updates**: ${{ steps.check.outputs.update_count }} changes processed" >> /tmp/arch-summary.md
            echo "" >> /tmp/arch-summary.md
            echo "📂 **Full Documentation**: [docs/architecture/](docs/architecture/)" >> /tmp/arch-summary.md
            echo "" >> /tmp/arch-summary.md
            
            # This is a simplified update - in practice, you might want more sophisticated README updating
            echo "Architecture summary prepared for README"
          fi
          
      - name: Commit Documentation Updates
        if: steps.check.outputs.has_updates == 'true'
        run: |
          # Add all documentation changes
          git add docs/
          git add .tools/doc-flow/
          
          # Check if there are changes to commit
          if git diff --cached --quiet; then
            echo "No documentation changes to commit"
            exit 0
          fi
          
          # Create commit message based on updates
          echo "📝 Update architecture documentation" > /tmp/commit-msg.txt
          echo "" >> /tmp/commit-msg.txt
          echo "- Processed ${{ steps.check.outputs.update_count }} architecture updates" >> /tmp/commit-msg.txt
          echo "- Updated component documentation" >> /tmp/commit-msg.txt
          echo "- Refreshed architecture overview" >> /tmp/commit-msg.txt
          echo "" >> /tmp/commit-msg.txt
          echo "Components updated:" >> /tmp/commit-msg.txt
          echo "${{ steps.analyze.outputs.components }}" >> /tmp/commit-msg.txt
          echo "" >> /tmp/commit-msg.txt
          echo "Commits processed:" >> /tmp/commit-msg.txt
          echo "${{ steps.analyze.outputs.recent_commits }}" >> /tmp/commit-msg.txt
          echo "" >> /tmp/commit-msg.txt
          echo "Auto-generated by Doc Flow 🤖" >> /tmp/commit-msg.txt
          
          git commit -F /tmp/commit-msg.txt
          git push origin main
          
          echo "✅ Architecture documentation updated and committed"
          
      - name: Create Architecture Report
        if: steps.check.outputs.has_updates == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const updateCount = '${{ steps.check.outputs.update_count }}';
            const components = `${{ steps.analyze.outputs.components }}`;
            const commits = `${{ steps.analyze.outputs.recent_commits }}`;
            
            // Create an issue comment or discussion post about the architecture update
            // This could be customized to create issues, discussions, or notifications
            
            console.log(`Architecture documentation updated:
            - ${updateCount} updates processed
            - Components: ${components}
            - Commits: ${commits}`);
            
            // Optionally create a summary issue or update project metrics
            
      - name: Cleanup Old Updates
        if: steps.check.outputs.has_updates == 'true'
        run: |
          # Archive old processed updates to keep pending-updates.md clean
          if [ -f ".tools/doc-flow/pending-updates.md" ]; then
            # Create archive directory
            mkdir -p ".tools/doc-flow/archive"
            
            # If file is getting large, archive old processed updates
            LINE_COUNT=$(wc -l < ".tools/doc-flow/pending-updates.md")
            if [ $LINE_COUNT -gt 1000 ]; then
              echo "📦 Archiving old updates to keep pending file manageable"
              
              # Archive processed updates older than 30 days
              DATE_30_DAYS_AGO=$(date -d "30 days ago" '+%Y-%m-%d' 2>/dev/null || date -v -30d '+%Y-%m-%d')
              
              # This is a simplified cleanup - in practice you might want more sophisticated archiving
              cp ".tools/doc-flow/pending-updates.md" ".tools/doc-flow/archive/updates-$(date '+%Y%m%d').md"
              
              echo "✅ Updates archived for history"
            fi
          fi