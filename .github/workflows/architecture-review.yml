name: Architecture Documentation Review

on:
  pull_request:
    paths:
      - '**/*.js'
      - '**/*.ts'
      - '**/*.py'
      - '**/*.java'
      - '**/*.go'
      - '**/*.rs'
      - '**/*.php'
      - '**/*.rb'
      - '**/*.cs'
      - '**/package.json'
      - '**/requirements.txt'
      - '**/pom.xml'
      - '**/go.mod'
      - '**/Cargo.toml'

jobs:
  architecture-analysis:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Detect Architecture Changes
        id: detect
        run: |
          # Check if commit messages contain architecture keywords
          echo "Analyzing commits for architectural changes..."
          
          # Get commit messages from PR
          COMMITS=$(git log --oneline origin/${{ github.base_ref }}..HEAD)
          echo "Commits in PR:"
          echo "$COMMITS"
          
          # Check for architecture keywords
          if echo "$COMMITS" | grep -iE "(add|new|create|implement|feat).*(service|controller|component|module|integration|api|database)" > /dev/null; then
            echo "üèóÔ∏è Architecture changes detected in PR"
            echo "architecture_changes=true" >> $GITHUB_OUTPUT
            
            # Extract detected components
            COMPONENTS=$(echo "$COMMITS" | grep -iE "(add|new|create|implement|feat).*(service|controller|component|module)" | head -5)
            echo "detected_components<<EOF" >> $GITHUB_OUTPUT
            echo "$COMPONENTS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "No architecture changes detected"
            echo "architecture_changes=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Analyze Changed Files
        if: steps.detect.outputs.architecture_changes == 'true'
        id: analyze
        run: |
          # Count changed files by type
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}..HEAD)
          
          # Categorize files
          SERVICES=$(echo "$CHANGED_FILES" | grep -iE "(service|Service)" | wc -l)
          CONTROLLERS=$(echo "$CHANGED_FILES" | grep -iE "(controller|Controller)" | wc -l) 
          MODELS=$(echo "$CHANGED_FILES" | grep -iE "(model|Model|entity|Entity)" | wc -l)
          CONFIGS=$(echo "$CHANGED_FILES" | grep -iE "(config|Config|settings)" | wc -l)
          
          echo "services_count=$SERVICES" >> $GITHUB_OUTPUT
          echo "controllers_count=$CONTROLLERS" >> $GITHUB_OUTPUT
          echo "models_count=$MODELS" >> $GITHUB_OUTPUT
          echo "configs_count=$CONFIGS" >> $GITHUB_OUTPUT
          
          # Calculate complexity score
          COMPLEXITY=$((SERVICES * 3 + CONTROLLERS * 2 + MODELS * 1 + CONFIGS * 2))
          echo "complexity_score=$COMPLEXITY" >> $GITHUB_OUTPUT
          
          # Determine impact level
          if [ $COMPLEXITY -gt 10 ]; then
            echo "impact_level=high" >> $GITHUB_OUTPUT
          elif [ $COMPLEXITY -gt 5 ]; then
            echo "impact_level=medium" >> $GITHUB_OUTPUT
          else
            echo "impact_level=low" >> $GITHUB_OUTPUT
          fi
          
      - name: Check for Doc Flow Files
        if: steps.detect.outputs.architecture_changes == 'true'
        id: docflow
        run: |
          # Check if PR includes Doc Flow documentation
          if [ -f ".tools/doc-flow/pending-updates.md" ]; then
            echo "doc_flow_present=true" >> $GITHUB_OUTPUT
            
            # Check if it has recent content
            if [ -s ".tools/doc-flow/pending-updates.md" ]; then
              echo "has_pending_updates=true" >> $GITHUB_OUTPUT
            else
              echo "has_pending_updates=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "doc_flow_present=false" >> $GITHUB_OUTPUT
            echo "has_pending_updates=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Comment Architecture Analysis
        if: steps.detect.outputs.architecture_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const complexity = '${{ steps.analyze.outputs.complexity_score }}';
            const impactLevel = '${{ steps.analyze.outputs.impact_level }}';
            const services = '${{ steps.analyze.outputs.services_count }}';
            const controllers = '${{ steps.analyze.outputs.controllers_count }}';
            const models = '${{ steps.analyze.outputs.models_count }}';
            const configs = '${{ steps.analyze.outputs.configs_count }}';
            const hasDocFlow = '${{ steps.docflow.outputs.doc_flow_present }}' === 'true';
            const hasPendingUpdates = '${{ steps.docflow.outputs.has_pending_updates }}' === 'true';
            const detectedComponents = `${{ steps.detect.outputs.detected_components }}`;
            
            const impactEmoji = {
              'high': 'üî¥',
              'medium': 'üü°', 
              'low': 'üü¢'
            };
            
            let comment = '## üèóÔ∏è Architecture Change Analysis\n\n';
            comment += `**Impact Level**: ${impactEmoji[impactLevel]} ${impactLevel.toUpperCase()} (Score: ${complexity})\n\n`;
            comment += '### Detected Changes\n```\n';
            comment += `${detectedComponents}\n`;
            comment += '```\n\n';
            comment += '### File Analysis\n';
            comment += `- **Services**: ${services} files\n`;
            comment += `- **Controllers**: ${controllers} files\n`;
            comment += `- **Models**: ${models} files\n`;
            comment += `- **Configurations**: ${configs} files\n\n`;
            comment += '### Doc Flow Status\n';
            
            if (hasDocFlow && hasPendingUpdates) {
              comment += '‚úÖ **Doc Flow documentation present** - Architecture changes have been captured for processing.';
            } else if (hasDocFlow && !hasPendingUpdates) {
              comment += '‚ö†Ô∏è **Doc Flow present but no pending updates** - Please ensure architectural changes are captured in `.tools/doc-flow/pending-updates.md`';
            } else {
              comment += '‚ùå **No Doc Flow documentation** - Consider setting up Doc Flow to automatically document architectural changes:\n\n';
              comment += '```bash\n# Set up Doc Flow for automatic architecture documentation\n./setup.sh\n```';
            }
            
            comment += '\n\n### Review Guidelines\n';
            
            if (impactLevel === 'high') {
              comment += '\nüî¥ **High Impact Changes** - Please ensure:\n';
              comment += '- [ ] Architecture documentation is complete and accurate\n';
              comment += '- [ ] Component relationships are properly documented\n';
              comment += '- [ ] Integration points are clearly defined\n';
              comment += '- [ ] Migration/deployment impact is considered\n';
              comment += '- [ ] Team lead review is obtained';
            } else if (impactLevel === 'medium') {
              comment += '\nüü° **Medium Impact Changes** - Please verify:\n';
              comment += '- [ ] Component purpose and responsibilities are documented\n';
              comment += '- [ ] Dependencies are clearly identified\n';
              comment += '- [ ] API changes are documented\n';
              comment += '- [ ] Architecture consistency is maintained';
            } else {
              comment += '\nüü¢ **Low Impact Changes** - Please confirm:\n';
              comment += '- [ ] Component changes are documented\n';
              comment += '- [ ] Basic architectural consistency is maintained';
            }
            
            comment += '\n\n---\n*This analysis was generated automatically by Doc Flow. For more information, see the [Architecture Documentation Guide](docs/OPEN-SOURCE-WORKFLOW.md).*';
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
      - name: Label Architecture PR
        if: steps.detect.outputs.architecture_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const impactLevel = '${{ steps.analyze.outputs.impact_level }}';
            const hasDocFlow = '${{ steps.docflow.outputs.doc_flow_present }}' === 'true';
            const hasPendingUpdates = '${{ steps.docflow.outputs.has_pending_updates }}' === 'true';
            
            const labels = ['architecture-change'];
            
            // Add impact level label
            labels.push(`impact-${impactLevel}`);
            
            // Add documentation status labels
            if (hasDocFlow && hasPendingUpdates) {
              labels.push('docs-included');
            } else if (hasDocFlow && !hasPendingUpdates) {
              labels.push('docs-incomplete');
            } else {
              labels.push('needs-docs');
            }
            
            // Add review requirement for high impact
            if (impactLevel === 'high') {
              labels.push('needs-architecture-review');
            }
            
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: labels
            });
            
      - name: Request Architecture Review
        if: steps.detect.outputs.architecture_changes == 'true' && steps.analyze.outputs.impact_level == 'high'
        uses: actions/github-script@v7
        with:
          script: |
            // Request review from architecture team (customize as needed)
            const architectureTeam = ['maintainer1', 'maintainer2']; // Replace with actual usernames
            
            for (const reviewer of architectureTeam) {
              try {
                await github.rest.pulls.requestReviewers({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.issue.number,
                  reviewers: [reviewer]
                });
              } catch (error) {
                console.log(`Could not request review from ${reviewer}: ${error.message}`);
              }
            }